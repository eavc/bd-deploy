#######################################################
###  BeatDiabet.es  /etc/nginx.conf  BEGIN
#######################################################

# As a thumb rule: One per CPU. If you are serving a large amount
# of static files, which requires blocking disk reads, you may want
# to increase this from the number of cpu_cores available on your
# system.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes     2;         # number of _real_ cpu cores - 2 (if machine has 4 cores, leave other 2 for sys, and pgsql, etc.)
worker_priority      15;        # renice workers to reduce priority compared to system processes for
                                # machine health. worst case nginx will get ~25% system resources at nice=15
# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 2048;     

events {
    # When you need > 8000 * cpu_cores connections, you start optimizing
    # your OS, and this is probably the point at where you hire people
    # who are smarter than you, this is *a lot* of requests.
    # We can set worker_process to as little as 25 since workers times worker_processes would equal 75. 
    # The advantage of a low worker_process count is very, very fast reaction times when a client connects. 
    # When a client issues a request there is some serial contention when Nginx assigns a processes to fulfilling a request. 
    # By keeping worker_processes low you gain fast reaction speed.
    # Source: https://calomel.org/nginx.html
    worker_connections 50;    # number of parallel or concurrent connections per worker_processes
    # This sets up some smart queueing for accept(2)'ing requests
    # Set it to "on" if you have > worker_processes
    accept_mutex        on;     # serially accept() connections and pass to workers, efficient if workers gt 1
    #accept_mutex_delay 500ms;  # worker process will accept mutex after this delay if not assigned. (default 500ms) 
    # These settings are OS specific, by defualt Nginx uses select(2),
    # however, for a large number of requests epoll(2) and kqueue(2)
    # are generally faster than the default (select(2))
    use epoll; # enable for Linux 2.6+
    # use kqueue; # enable for *BSD (FreeBSD, OS X, ..)
}


# Change these paths to somewhere that suits you!
error_log  logs/error.log;
pid        logs/nginx.pid;


http {
  # Set the mime-types via the mime.types external file
  include       mime.types;

  # And the fallback mime-type
  default_type  application/octet-stream;

  # Format for our log files
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  # Click tracking!
  access_log   logs/access.log  main;

## Size Limits
    #client_body_buffer_size        8k;
    #client_header_buffer_size      1k;
    #client_max_body_size           1m;
    #large_client_header_buffers    4 4k/8k;

# Timeouts, do not keep connections open longer than necessary to reduce resource usage and deny Slowloris type attacks.
    client_body_timeout             4s;         # maximum time between packets the client can pause when sending nginx any data
    client_header_timeout           4s;         # maximum time the client has to send the entire header to nginx
    keepalive_timeout               5s;         # timeout which a single keep-alive client connection will stay open
    send_timeout                    4s;         # maximum time between packets nginx is allowed to pause when sending the client data
    spdy_keepalive_timeout          180s;       # inactivity timeout after which the SPDY connection is closed
    spdy_recv_timeout               4s;         # timeout if nginx is currently expecting data from the client but nothing arrives

## General Options
    #aio                            on;         # asynchronous file I/O, fast with ZFS, make sure sendfile=off
    charset                         utf-8;      # adds the line "Content-Type" into response-header, same as "source_charset"
    gzip                            off;        # disable on the fly gzip compression due to higher latency, only use gzip_static
    #gzip_http_version              1.0;        # serve gzipped content to all clients including HTTP/1.0 
    gzip_static                     on;         # precompress content (gzip -9) with an external script
    #gzip_vary                      on;         # send response header "Vary: Accept-Encoding"
    gzip_proxied                    expired no-cache no-store private auth;        # allows compressed responses for any request even from proxies
    gzip_disable                    "MSIE [1-6]\.";
    ignore_invalid_headers          on;
    keepalive_requests              50;         # number of requests per connection, does not affect SPDY
    keepalive_disable               none;       # allow all browsers to use keepalive connections
    max_ranges                      0;          # disabled to stop range header DoS attacks
    msie_padding                    off;
    open_file_cache                 max=1000 inactive=2h;
    open_file_cache_errors          on;
    open_file_cache_min_uses        1;
    open_file_cache_valid           1h;
    output_buffers                  1 512;
    postpone_output                 1440;       # postpone sends to match our machine's MSS
    read_ahead                      512K;       # kernel read head set to the output_buffers
    recursive_error_pages           on;
    reset_timedout_connection       on;         # reset timed out connections freeing ram
    sendfile                        on;         # You usually want to serve static files with Nginx, on for decent direct disk I/O
    server_tokens                   off;        # version number in error pages
    server_name_in_redirect         off;        # if off, nginx will use the requested Host header
    source_charset                  utf-8;      # same value as "charset"
    tcp_nodelay                     on;         # Nagle buffering algorithm, used for keepalive only, off may be better for Comet/long-poll stuff
    tcp_nopush                      off;        # off may be better for Comet/long-poll stuff

## Request limits
  limit_req_zone  $binary_remote_addr  zone=gulag:1m   rate=60r/m;


# global SSL options with Perfect Forward Secrecy (PFS) high strength ciphers first. 
# PFS ciphers are those which start with ECDHE or DHE which means
# (EC)DHE which stands for (Elliptic Curve) Diffie-Hellman Ephemeral.
# https://community.qualys.com/blogs/securitylabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 \
    EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 \
    EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_session_timeout 5m; 
    # SPDY timeout=180sec, keepalive=20sec; connection close=session expires

## http .:. redirect to https
  server {
     #add_header  Alternate-Protocol "443:npn-spdy/2";
      add_header  Cache-Control "public";
      access_log  /var/log/nginx/access.log main buffer=32k;
      error_log   /var/log/nginx/error.log error;
      expires     max;
      limit_req   zone=gulag burst=200 nodelay;
      listen      [::]:80;
      root        /var/empty;
      return 301 https://example.com$uri;
  }

## https .:. (www.)beatdiabet.es
  server {
      add_header  Cache-Control "public";
     #add_header  Content-Security-Policy "default-src 'none';style-src 'self';img-src 'self' data: ;";
      add_header  X-Content-Type-Options "nosniff";
      add_header  X-Frame-Options "DENY";
      add_header  Strict-Transport-Security "max-age=315360000; includeSubdomains";
      access_log  /var/log/nginx/access.log main;
      error_log   /var/log/nginx/error.log info;
      expires     max;
      index       index.html;
      limit_req   zone=gulag burst=200 nodelay;
      listen      [::]:443 ssl spdy default_server;
      # Path for static files
      root        /srv/beatdiabet.es/public;
      #server_name example.com www.example.com;
      server_name "beatdiabet.es www.beatdiabet.es";

    # SSL certs
      ssl on;
      ssl_session_cache shared:SSL:1m;
      ssl_certificate /ssl_keys/example.com_ssl.crt;
      ssl_certificate_key /ssl_keys/example.com_ssl.key;
      ssl_ecdh_curve secp256r1;
      ssl_stapling on;
      ssl_stapling_verify on;

     # Note: if{} sections are very expensive to process. Only use an If{}
     # block is really need them.  Please take a look lower down on the page
     # for our discussion of if{} statements.

     ## Only allow GET and HEAD request methods. By default Nginx blocks
     ## all requests type other then GET and HEAD for static content.
     # if ($request_method !~ ^(GET|HEAD)$ ) {
     #   return 405;
     # }

     ## Deny illegal Host headers.
     # if ($host !~* ^(mydomain.com|www.mydomain.com)$ ) {
     #  return 405;
     # }

     ## Deny certain User-Agents (case insensitive)
     ## The ~* makes it case insensitive as opposed to just a ~
     # if ($http_user_agent ~* (Baiduspider|Jullo) ) {
     #  return 405;
     # }

     ## Deny certain Referers (case insensitive)
     ## The ~* makes it case insensitive as opposed to just a ~
     # if ($http_referer ~* (girl|jewelry|love|nudit|organic|poker|porn|teen|video|webcam|zippo) ) {
     #  return 405;
     # }

     ## Redirect from www to non-www. Notice we are stripping out arguments with "?"
     # if ($host != 'mydomain.com') { return 301 https://mydomain.com$uri; }

     ## Stop Image and Document Hijacking
     #location ~* (\.jpg|\.png|\.css)$ {
     #  if ($http_referer !~ ^(http://mydomain.com) ) {
     #    return 405;
     #  }
     #}

     ## Restricted Access directory by password in the access_list file.
      location ^~ /app/ {
            allow 127.0.0.1/32;
            allow 10.10.10.0/24;
            deny all;
            auth_basic "RESTRICTED ACCESS";
            auth_basic_user_file /var/www/htdocs/secure/access_list;
        }

     ## Serve an empty 1x1 gif _OR_ an error 204 (No Content) for favicon.ico
     # location = /favicon.ico {
     #  #empty_gif;
     #   return 204;
     # }

     ## default location with System Maintenance (Service Unavailable) check
      location  / { try_files system_maintenance.html $uri $uri/ =404; }

     ## All other errors get the generic error page
      error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 495 496 497
                 500 501 502 503 504 505 506 507 /error_page.html;
      location  /error_page.html { internal; }

          # Static assets
    location ~* ^.+\.(manifest|appcache)$ {
      expires -1;
      root   /sites/example.com/public;
      access_log logs/static.log;
    }

    # Set expires max on static file types
    location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm)$ {
      expires max;
      root   /sites/example.com/public;
      access_log off;
    }

    # opt-in to the future
    add_header "X-UA-Compatible" "IE=Edge,chrome=1";

  }
}
#######################################################
###  BeatDiabet.es  /etc/nginx.conf  END
#######################################################
